"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7327],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return f}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},b=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),b=l(r),f=a,d=b["".concat(c,".").concat(f)]||b[f]||p[f]||o;return r?n.createElement(d,s(s({ref:t},u),{},{components:r})):n.createElement(d,s({ref:t},u))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=b;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=r[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}b.displayName="MDXCreateElement"},8922:function(e,t,r){r.r(t),r.d(t,{assets:function(){return u},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return p}});var n=r(3117),a=r(102),o=(r(7294),r(3905)),s=["components"],i={id:"betterer.betterertestconstraint",title:"BettererTestConstraint",sidebar_label:"BettererTestConstraint",slug:"/betterer.betterertestconstraint"},c=void 0,l={unversionedId:"api/betterer.betterertestconstraint",id:"api/betterer.betterertestconstraint",title:"BettererTestConstraint",description:"API &gt; @betterer/betterer &gt; BettererTestConstraint",source:"@site/docs/api/betterer.betterertestconstraint.md",sourceDirName:"api",slug:"/betterer.betterertestconstraint",permalink:"/betterer/docs/betterer.betterertestconstraint",editUrl:"https://github.com/phenomnomnominal/betterer/edit/master/website/docs/api/betterer.betterertestconstraint.md",tags:[],version:"current",frontMatter:{id:"betterer.betterertestconstraint",title:"BettererTestConstraint",sidebar_label:"BettererTestConstraint",slug:"/betterer.betterertestconstraint"}},u={},p=[{value:"Signature",id:"signature",level:2},{value:"References",id:"references",level:2},{value:"Example",id:"example",level:2}],b={toc:p};function f(e){var t=e.components,r=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,n.Z)({},b,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/betterer/docs/index"},"API")," ",">"," ",(0,o.kt)("a",{parentName:"p",href:"/betterer/docs/betterer"},"@betterer/betterer")," ",">"," ",(0,o.kt)("a",{parentName:"p",href:"/betterer/docs/betterer.betterertestconstraint"},"BettererTestConstraint")),(0,o.kt)("p",null,"A function that checks if a test result is ",(0,o.kt)("a",{parentName:"p",href:"/betterer/docs/constraints.bettererconstraintresult"},(0,o.kt)("inlineCode",{parentName:"a"},"better"),", ",(0,o.kt)("inlineCode",{parentName:"a"},"worse"),", or the ",(0,o.kt)("inlineCode",{parentName:"a"},"same"))," than the expected result."),(0,o.kt)("h2",{id:"signature"},"Signature"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"export declare type BettererTestConstraint<DeserialisedType> = (result: DeserialisedType, expected: DeserialisedType) => MaybeAsync<BettererConstraintResult>;\n")),(0,o.kt)("h2",{id:"references"},"References"),(0,o.kt)("p",null," ",(0,o.kt)("a",{parentName:"p",href:"/betterer/docs/constraints.bettererconstraintresult"},"BettererConstraintResult")),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { BettererConstraintResult } from '@betterer/constraints';\n\nexport function bigger(result: number, expected: number): BettererConstraintResult {\n  if (result === expected) {\n    return BettererConstraintResult.same;\n  }\n if (result > expected) {\n    return BettererConstraintResult.better;\n  }\n  return BettererConstraintResult.worse;\n}\n")))}f.isMDXComponent=!0}}]);